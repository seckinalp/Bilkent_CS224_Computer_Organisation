CS224
Lab No: 3
Section No: 4
Seçkin Alp Kargı
22001942
27.10.2023


Lab 3. Part A
------------------------------------------------------------------------------------------
.data
	text: .asciiz "\nEnter first number: "
	text1: .asciiz "Enter second number: "
	text2: .asciiz "Quotient: "

.text
main:
	add $v0, $zero, 4
	la $a0, text
	syscall
	
	add $v0,$zero,5
	syscall
	
	add $s0, $zero, $v0
	
	add $v0, $zero, 4
	la $a0, text1
	syscall
	
	add $v0,$zero,5
	syscall
	
	add $s1, $zero, $v0
	
	beq $s0, $zero, done
	beq $s1, $zero, done
	add $s2, $zero, 0
	add $a0,$zero, $s0
	add $a1,$zero, $s1
	add $a2,$zero, 0
	jal recursion
	add $v0, $zero,4
  	la  $a0, text2
  	syscall
  	add $v0, $zero,1
  	la  $a0, ($a2)
  	syscall
	j main
done:
	add $v0, $zero, 10
	syscall
	
recursion:   
	addi	$sp, $sp, -12
	sw	$s1, 8($sp)
	sw	$s0, 4($sp)
	sw	$ra, 0($sp)
	
    	blt $s0, $s1, finish #base case
    	
	sub $s0, $s0, $a1 
	addi $a2, $a2, 1 
    	jal recursion
    	
  finish:
  	lw	$ra, 0($sp)
	lw	$s0, 4($sp)
	lw	$s1, 8($sp)
	addi	$sp, $sp, 12
	jr $ra

------------------------------------------------------------------------------------------
Lab 3. Part B
------------------------------------------------------------------------------------------
.data
	line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "
	
keyValueOfCurrentNode:
	.asciiz	"\n Key Value of Current Node: "
	
	soru1: .asciiz "\nHow many node do you want to create: "
	soru2: .asciiz "\nKey Value: "
	soru3: .asciiz "Data Value: "
	text: .asciiz "\n\n\n Reverse Linked List: "
	

.text
	
	jal	ListCreation
	
	add	$a0, $zero, $v0
	
	jal printLinkedList
	
	
	add $s0, $zero, $v0
	add $a1, $zero, $v1
	
	la $a0, text
	add $v0, $zero, 4
	syscall
	
	add $a0, $zero, $s0
	jal printLinkedList2
	
	add	$v0, $zero, 10
	syscall
	
	ListCreation:
	

	
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -28
	sw	$s5, 24($sp)
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	la $a0, soru1
	add $v0, $zero, 4
	syscall
	
	add $v0, $zero, 5
	syscall
	
	add $s0, $zero, $v0 #s0 node number
	add $s1,$zero, 0 #node counter

	la $a0, soru2
	add $v0, $zero, 4
	syscall
	
	add $v0, $zero, 5
	syscall
	
	add $s4, $zero, $v0 #s4 key value
	la $a0, soru3
	add $v0,$zero, 4
	syscall
	
	add $v0,$zero, 5
	syscall
	
	add $s5, $zero, $v0 #s5 data value
	
	add	$a0,$zero, 12
	add	$v0,$zero, 9
	syscall
	add	$s2,$zero, $v0
	add	$s3,$zero, $v0
	
	sw	$s4, 0($s2)
	sw	$s5, 4($s2)	
	
	addi $s1,$s1,1
create:
	beq $s1, $s0, donee
	addi $s1,$s1,1
	
	la $a0, soru2
	add $v0, $zero, 4
	syscall
	
	add $v0, $zero, 5
	syscall
	
	add $s4,$zero, $v0 #s4 key value
	la $a0, soru3
	add $v0, $zero, 4
	syscall
	
	add $v0, $zero, 5
	syscall
	
	add $s5,$zero, $v0 #s5 data value
	
	add	$a0, $zero, 12
	add	$v0, $zero, 9
	syscall
	sw	$v0, 8($s2)
	add	$s2, $zero, $v0
	sw	$s4, 0($s2)
	sw	$s5, 4($s2)	
	
	j create
donee:
	# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 8($s2)
	add	$v0,$zero, $s3
	add	$v1,$zero, $s0	# Now $v0 points to the list head ($s3).
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	lw	$s5, 24($sp)
	addi	$sp, $sp, 28
	
	jr	$ra
	
	
	# $a0 list pointer
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -28
	sw 	$s5, 24($sp)
	sw 	$s4, 20($sp)
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	add $s0,$zero, $a0	# $s0: points to the current node.
	add   $s3,$zero, 0
	add $s5,$zero,$a0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 8($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	lw	$s4, 0($s0)	# s4: Key of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	add	$v0,$zero, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	add	$v0,$zero, 4
	syscall
	
	add	$a0,$zero, $s3	# $s3: Node number (position) of current node
	add	$v0,$zero, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	add	$v0,$zero, 4
	syscall
	
	add	$a0,$zero, $s0	# $s0: Address of current node
	add	$v0,$zero, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	add	$v0,$zero, 4
	syscall
	
	add	$a0,$zero, $s1	# $s0: Address of next node
	add	$v0,$zero, 34
	syscall	
	
	la	$a0, keyValueOfCurrentNode
	add	$v0,$zero, 4
	syscall
		
	add	$a0,$zero, $s4	# $s4: key value of current node
	add	$v0,$zero, 1		
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	add	$v0,$zero, 4
	syscall
		
	add	$a0,$zero, $s2	# $s2: Data of current node
	add	$v0,$zero, 1		
	syscall	
	

	
# Now consider next node.
	add	$s0,$zero, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	add $v0,$zero, $s5
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	lw	$s4, 20($sp)
	lw	$s5, 24($sp)
	addi	$sp, $sp, 28
	jr	$ra
	# $a0 list pointer
	
printLinkedList2:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -32
	sw 	$s6, 28($sp)
	sw 	$s5, 24($sp)
	sw 	$s4, 20($sp)
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	add $s5,$zero,$a1
	add $s3,$zero, $a1
	add $s3,$s3, $1
	add $s6,$zero, $a1 #node count
	add $s6,$s6, -1
	add $s0,$zero, $a0	# $s0: points to the current node.
	
	add $s5,$zero,$a1
	
	mul $s6, $s6,12
	add $s6,$s0,$s6  #adress of last node

printNextNode2:
	beq	$s5, $zero, printedAll2
				# $s0: Address of current node
	lw	$s1, 8($s6)	# $s1: Address of  next node
	lw	$s2, 4($s6)	# $s2: Data of current node
	lw	$s4, 0($s6)	# s4: Key of current node
	addi	$s5, $s5, -1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.

	add $s3,$s3,-1
	la	$a0, line
	add	$v0,$zero, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	add	$v0,$zero, 4
	syscall
	
	add	$a0,$zero, $s3	# $s3: Node number (position) of current node
	add	$v0,$zero, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	add	$v0,$zero, 4
	syscall
	
	add	$a0,$zero, $s6	# $s0: Address of current node
	add	$v0,$zero, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	add	$v0,$zero, 4
	syscall
	
	add	$a0,$zero, $s1	# $s0: Address of next node
	add	$v0,$zero, 34
	syscall	
	
	la	$a0, keyValueOfCurrentNode
	add	$v0,$zero, 4
	syscall
		
	add	$a0,$zero, $s4	# $s4: key value of current node
	add	$v0,$zero, 1		
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	add	$v0,$zero, 4
	syscall
		
	add	$a0,$zero, $s2	# $s2: Data of current node
	add	$v0,$zero, 1		
	syscall	
	

	
# Now consider next node.
	add	$s6,$s6, -12	# Consider next node.
	j	printNextNode2
printedAll2:
# Restore the register values
	
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	lw	$s4, 20($sp)
	lw	$s5, 24($sp)
	lw	$s6, 28($sp)
	addi	$sp, $sp, 32
	jr	$ra

------------------------------------------------------------------------------------------