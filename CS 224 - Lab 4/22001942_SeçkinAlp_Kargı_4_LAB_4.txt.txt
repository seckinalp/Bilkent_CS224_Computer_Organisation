CS224
Lab No: 4
Section No: 4
Seçkin Alp Kargı
22001942
16.11.2023

------------------------------------------------------------------------------------------

-------------------------------------------`timescale 1ns / 1ps

module processor_simulation;
    reg clk= 1'b1;
    reg reset;
    wire memwrite;
    wire [31:0] dataadr,writedata,instr,pc,readdata;
    
    top top1
    (
        .clk(clk),
        .reset(reset),
        .memwrite(memwrite),
        .dataadr(dataadr),
        .writedata(writedata),
        .instr(instr),
        .pc(pc),
        .readdata(readdata)
        
    );
    
    always #5 clk = ~clk;
    
    initial
    begin
        reset = 0;
        #50;
        reset = 1;
        #50;
        reset = 0;
        #250;
        $finish;
    end
endmodule
`timescale 1ns / 1ps

module top (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] pc, instr, readdata,           
	     output  logic       memwrite);    

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:0], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule

-----------------------------------------------
`timescale 1ns / 1ps
module topfinal
(
    input logic clk, sw_input1, sw_input2,
    output logic memwrite,
    output logic dp,
    output logic [3:0]an,
    output logic [6:0] seg
);
logic [31:0] dataadr, writedata, instr,pc,readdata;
logic clk_pulse_1, clk_pulse_0;

pulse_controller pulse1(clk,sw_input1,0,clk_pulse_1);
pulse_controller pulse2(clk,sw_input2,0,clk_pulse_2);
top2 topfinal(clk_pulse_1,clk_pulse_2,writedata,dataadr,pc,instr,readdata,memwrite); 
display_controller display(clk,writedata[7:4],writedata[3:0],dataadr[7:4],dataadr[3:0],seg,dp,an);

endmodule
/////////////////////////////////////////////////////////////////////////////////
// 
//   This module takes a slide switch or pushbutton input and 
//   does the following:
//     --debounces it (ignoring any addtional changes for ~40 milliseconds)
//     --synchronizes it with the clock edges
//     --produces just one pulse, lasting for one clock period
//   
//   Note that the 40 millisecond debounce time = 2000000 cycles of 
//   50MHz clock (which has 20 nsec period)
//   
//   Inputs/Outputs:
//   sw_input: the signal coming from the slide switch or pushbutton
//   CLK: the system clock on the BASYS3 board
//   clear: resets the pulse controller
//   clk_pulse: the synchronized debounced single-pulse output
//
//   Usage for CS224 Lab4-5: 
//   - Give the BASYS3 clock and the push button signal as inputs
//   - You don't need to clear the controller
//   - Send the output pulse to your top module
//   
//   For correct connections, carefully plan what should be in the .XDC file
//
//////////////////////////////////////////////////////////////////////////////////
`timescale 1ns / 1ps
module pulse_controller(
	input CLK, sw_input, clear,
	output reg clk_pulse );

	 reg [2:0] state, nextstate;
	 reg [27:0] CNT; 
	 wire cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule`timescale 1ns / 1ps

module top2(input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] pc, instr, readdata,           
	     output  logic       memwrite);    

   // instantiate processor and memories  
   mips2 mips2 (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem2 imem2 (pc[7:0], instr);  
   dmem2 dmem2 (clk, memwrite, dataadr, writedata, readdata);

endmodule

`timescale 1ns / 1ps
module mips2 (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic       pcsrc, zero, alusrc, regdst, regwrite,newsignal;
  logic [2:0]  alucontrol;
  logic [1:0] memtoreg, jump;

  controller2 c2 (instr[31:26], instr[5:0], zero, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, alucontrol,newsignal);

  datapath2 dp2 (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata,newsignal);

endmodule`timescale 1ns / 1ps
module controller2(input  logic[5:0] op, funct,
                  input  logic     zero,
                  output logic  [1:0]   memtoreg,
                  output logic  memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic [1:0]    jump,
                  output logic[2:0] alucontrol,
                  output logic newsignal);

   logic [1:0] aluop;
   logic       branch;

   maindec2 md2 (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, aluop,newsignal);

   aludec2  ad2 (funct, aluop, alucontrol);

   assign pcsrc = branch & zero;

endmodule


`timescale 1ns / 1ps
module maindec2 (input logic[5:0] op, 
                   output logic [1:0] memtoreg,
	              output logic memwrite, branch,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] jump,aluop,
	              output logic newsignal);
   logic [11:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump,newsignal} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 12'b110000010000; // R-type
      6'b100011: controls <= 12'b101000100000; // LW
      6'b101011: controls <= 12'b001010000000; // SW
      6'b000100: controls <= 12'b000100001000; // BEQ
      6'b001000: controls <= 12'b101000000000; // ADDI
      6'b000010: controls <= 12'b000000000010; // J
      6'b000111: controls <= 12'b101001000100; // Jal
      6'b001111: controls <= 12'b101011100001; // Push
      default:   controls <= 12'bxxxxxxxxxxxx; // illegal op
    endcase
endmodule

`timescale 1ns / 1ps
module aludec2 (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule`timescale 1ns / 1ps
module dmem2 (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule
`timescale 1ns / 1ps
module datapath2 (input  logic clk, reset,
input logic [1:0] memtoreg,
input logic pcsrc, alusrc, regdst,
                 input  logic regwrite,
                 input logic [1:0] jump,
		 input  logic[2:0]  alucontrol, 
                 output logic zero, 
		 output logic[31:0] pc, 
	         input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
	         input  logic[31:0] readdata,
	         input logic newsignal);

  logic [4:0]  writereg,regfinal;
  logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch,aluout1;
  logic [31:0] signimm, signimmsh, srca, srcb, result, aluplus4;
 
  // next PC logic
  flopr #(32) pcreg2(clk, reset, pcnext, pc);
  adder       pcadd12(pc, 32'b100, pcplus4);
  sl2         immsh2(signimm, signimmsh);
  adder       pcadd22(pcplus4, signimmsh, pcbranch);
  mux2 #(32)  pcbrmux2(pcplus4, pcbranch, pcsrc,
                      pcnextbr);
 // mux2 #(32)  pcmux2(pcnextbr, {pcplus4[31:28],instr[25:0], 2'b00}, jump, pcnext);
    mux4 #(32) pcmux44(pcnextbr, {pcplus4[31:28],instr[25:0], 2'b00},readdata,32'b0,jump,pcnext);
// register file logic
   regfile     rf2 (clk, regwrite, instr[25:21], instr[20:16], regfinal,
                   result, srca, writedata);
   mux2 #(5)    wrmux2 (instr[20:16], instr[15:11], regdst, writereg);
   
   adder pcadd222(aluout,4,aluplus4);
  // mux2 #(32)  resmux2 (aluout, readdata, memtoreg, result);
  mux4 # (32) resmux4(aluout,readdata,pcplus4,aluplus4,memtoreg,result);
  mux2 # (5) rfmuxx2(writereg[4:0],5'b011101, newsignal,regfinal);
  
  mux2 # (32) rfmuxx3(aluout1,aluplus4, newsignal,aluout);
   signext         se2 (instr[15:0], signimm);

  // ALU logic
   mux2 #(32)  srcbmux2 (writedata, signimm, alusrc, srcb);
   alu         alu2 (srca, srcb, alucontrol, aluout1, zero);

endmodule`timescale 1ns / 1ps

module top (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr, 
	     output  logic[31:0] pc, instr, readdata,           
	     output  logic       memwrite);    

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:0], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule
`timescale 1ns / 1ps
module mux4 #(parameter WIDTH = 8)
    (input logic[WIDTH-1:0] d0, d1, d2, d3,
    input logic[1:0] s,
    output logic[WIDTH-1:0] y);
    
    assign y = (s == 2'b00) ? d0 :
    (s == 2'b01) ? d1 :
    (s == 2'b10) ? d2 :
    d3;
endmodule`timescale 1ns / 1ps
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule

`timescale 1ns / 1ps
module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule`timescale 1ns / 1ps
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule`timescale 1ns / 1ps
module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule
`timescale 1ns / 1ps
module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff@(posedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule`timescale 1ns / 1ps
module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule`timescale 1ns / 1ps
module imem2 ( input logic [7:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case (addr)		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822; 
		8'h34: instr = 32'hac670044; 
		8'h38: instr = 32'h8c020050; 
		8'h3c: instr = 32'h08000011; 
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'h20020005;
		8'h48: instr = 32'h08000012;	

	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule

`timescale 1ns / 1ps

module processor_simulation;
    reg clk= 1'b1;
    reg reset;
    wire memwrite;
    wire [31:0] dataadr,writedata,instr,pc,readdata;
    
    top2 top1
    (
        .clk(clk),
        .reset(reset),
        .memwrite(memwrite),
        .dataadr(dataadr),
        .writedata(writedata),
        .instr(instr),
        .pc(pc),
        .readdata(readdata)
        
    );
    
    always #5 clk = ~clk;
    
    initial
    begin
        reset = 0;
        #50;
        reset = 1;
        #50;
        reset = 0;
        #250;
        $finish;
    end
endmodule
`timescale 1ns / 1ps

module alu32_simulation;
    reg [31:0] a, b;
    reg [2:0] alucont;
    wire [31:0] result;
    wire zero;
    reg clock;
    alu alu1 
    (
        .a(a),
        .b(b),
        .alucont(alucont),
        .result(result),
        .zero(zero)
    );

    always #2.5 clock = ~clock;
    initial 
    begin
        a = 32'h00000008;
        b = 32'h00000002;
        alucont = 3'b010; #10;
        alucont = 3'b110;#10;
        alucont = 3'b000; #10;
        alucont = 3'b001;#10;
        alucont = 3'b111; #10;
        alucont = 3'bXXX;
        #10;
        $finish;
    end

endmodule





